{"ast":null,"code":"var _jsxFileName = \"/Users/Ucing/Desktop/FE Test Review/FE TEST USER MANAGEMENT/user-management/src/component/FormField.js\";\nimport React from 'react';\nimport { withFormik, Field, Form } from 'formik';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport { hideForm, newUsersEdit, clearIndex, newUsersAdd, clearMode } from '../actions';\n\nconst FormField = ({\n  touched,\n  errors,\n  values,\n  hideForm,\n  state,\n  newUsersEdit,\n  users,\n  userIndexToEdit,\n  clearIndex,\n  clearMode,\n  newUsersAdd,\n  writeMode\n}) => {\n  let currentUser = [...users];\n  console.log(errors);\n\n  const throwForm = id => {\n    if (values.first_name == '' || values.last_name == '' || values.avatar == '') {\n      return null;\n    } else {\n      if (writeMode === 'edit_mode') {\n        newUsersEdit(currentUser, id, userIndexToEdit, values, hideForm);\n      } else if (writeMode === 'add_mode') {\n        newUsersAdd(currentUser, values, hideForm);\n      }\n\n      hideForm();\n      clearIndex();\n      clearMode();\n    }\n  };\n\n  console.log(values);\n  return React.createElement(From, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"FIRST NAME\"), touched.first_name && errors.first_name && React.createElement(\"p\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, errors.first_name), React.createElement(Field, {\n    type: \"text\",\n    name: \"first_name\",\n    placeholder: \"First Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"LAST NAME\"), touched.last && errors.last_name && React.createElement(\"p\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, errors.last_name), React.createElement(Field, {\n    type: \"text\",\n    name: \"last_name\",\n    placeholder: \"Last Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Avatar Url\"), touched.avatar && errors.avatar && React.createElement(\"p\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, errors.avatar), React.createElement(Field, {\n    type: \"text\",\n    name: \"avatar\",\n    placeholder: \"Avatar URL\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => throwForm(values.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"SUBMIT\"));\n};\n\nconst FormikComponent = withFormik({\n  mapPropsToValues({\n    first_name,\n    last_name,\n    avatar,\n    id\n  }) {\n    return {\n      first_name,\n      last_name,\n      avatar,\n      id\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    first_name: Yup.string().required('required'),\n    last_name: Yup.string().required('required'),\n    avatar: Yup.string().required('required')\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setErrors,\n    setSubmitting\n  }) {\n    if (values.first_name !== '' && values.last_name !== '' && values.avatar !== '') {\n      hideForm();\n      clearIndex();\n      clearMode();\n      resetForm();\n    } else {\n      setErrors({\n        first_name: \"required\"\n      });\n    }\n  }\n\n})(FormField);\n\nconst mapStateToProps = store => {\n  return {\n    state: store.formReducer,\n    users: store.usersReducer.users,\n    userIndexToEdit: store.editReducer.userIndexToEdit,\n    writeMode: store.editReducer.writeMode\n  };\n};\n\nexport default connect(mapStateToProps, {\n  hideForm,\n  newUsersEdit,\n  clearIndex,\n  newUsersAdd,\n  clearMode\n})(FormikComponent);","map":{"version":3,"sources":["/Users/Ucing/Desktop/FE Test Review/FE TEST USER MANAGEMENT/user-management/src/component/FormField.js"],"names":["React","withFormik","Field","Form","connect","Yup","hideForm","newUsersEdit","clearIndex","newUsersAdd","clearMode","FormField","touched","errors","values","state","users","userIndexToEdit","writeMode","currentUser","console","log","throwForm","id","first_name","last_name","avatar","last","FormikComponent","mapPropsToValues","validationSchema","object","shape","string","required","handleSubmit","resetForm","setErrors","setSubmitting","mapStateToProps","store","formReducer","usersReducer","editReducer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withFormik, Field, Form } from 'formik';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport { hideForm, newUsersEdit, clearIndex, newUsersAdd, clearMode } from '../actions';\n\nconst FormField = ({touched, errors, values, hideForm, state, newUsersEdit, users, userIndexToEdit, clearIndex, clearMode, newUsersAdd, writeMode}) => {\n    let currentUser = [...users]\n    console.log(errors)\n    const throwForm = (id,) => {\n        if(values.first_name == '' || values.last_name == '' || values.avatar == '') {\n            return null\n        } else {\n            if(writeMode === 'edit_mode') {\n                newUsersEdit(currentUser, id, userIndexToEdit, values, hideForm)\n            } else if (writeMode === 'add_mode') {\n                newUsersAdd(currentUser, values, hideForm)\n            }\n            hideForm()\n            clearIndex()\n            clearMode()\n        }\n    }\n\n    console.log(values)\n    return (\n        <From className=\"form\">\n            <p>FIRST NAME</p>\n            {touched.first_name && errors.first_name && <p className=\"required\">{errors.first_name}</p>}\n            <Field type=\"text\" name=\"first_name\" placeholder=\"First Name\"/>\n\n            <p>LAST NAME</p>\n            {touched.last && errors.last_name && <p className=\"required\">{errors.last_name}</p>}\n            <Field type=\"text\" name=\"last_name\" placeholder=\"Last Name\"/>\n\n            <p>Avatar Url</p>\n            {touched.avatar && errors.avatar && <p className=\"required\">{errors.avatar}</p>}\n            <Field type=\"text\" name=\"avatar\" placeholder=\"Avatar URL\"/>\n\n            <button onClick={() => throwForm(values.id)}>SUBMIT</button>            \n        </From>\n    )\n};\n\nconst FormikComponent = withFormik ({\n    mapPropsToValues({first_name, last_name, avatar, id}) {\n        return {\n            first_name,\n            last_name,\n            avatar,\n            id\n        }\n    },\n\n    validationSchema : Yup.object().shape({\n        first_name: Yup.string().required('required'),\n        last_name: Yup.string().required('required'),\n        avatar: Yup.string().required('required'),\n    }),\n\n    handleSubmit(values, {resetForm, setErrors, setSubmitting}){\n        if(values.first_name !== '' && values.last_name !== '' && values.avatar !== '') {\n            hideForm()\n            clearIndex()\n            clearMode()\n            resetForm()\n        } else {\n            setErrors({first_name: \"required\"})\n        }\n    }\n})(FormField)\n\nconst mapStateToProps = (store) => {\n    return {\n        state: store.formReducer,\n        users: store.usersReducer.users,\n        userIndexToEdit: store.editReducer.userIndexToEdit,\n        writeMode: store.editReducer.writeMode\n    }\n}\n\nexport default connect (mapStateToProps, {hideForm, newUsersEdit, clearIndex, newUsersAdd, clearMode})(FormikComponent)"]},"metadata":{},"sourceType":"module"}