{"ast":null,"code":"var _jsxFileName = \"/Users/Ucing/Desktop/FE Test Review/FE TEST USER MANAGEMENT/user-management/src/component/FormField.js\";\nimport React from 'react';\nimport { withFormik, Field, Form } from 'formik';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport { newUsersEdit, newUsersAdd } from '../actions/Users';\nimport { hideForm } from '../actions/Form';\nimport { clearIndex, clearMode } from '../actions/Edit';\n\nconst FormField = ({\n  touched,\n  errors,\n  values,\n  hideForm,\n  state,\n  newUsersEdit,\n  users,\n  userIndexToEdit,\n  clearIndex,\n  clearMode,\n  newUsersAdd,\n  writeMode\n}) => {\n  let currentUsers = [...users];\n  console.log(errors);\n\n  const throwForm = id => {\n    //hide form and clear everything\n    if (values.first_name == '' || values.last_name == '') {\n      //hideForm()\n      return null;\n    } else {\n      if (writeMode === 'edit_mode') {\n        //newUsers[userIndexToEdit] = values\n        newUsersEdit(currentUsers, id, userIndexToEdit, values, hideForm);\n      } else if (writeMode === 'add_mode') {\n        //newUsers.push(values)\n        newUsersAdd(currentUsers, values, hideForm);\n      }\n\n      hideForm();\n      clearIndex();\n      clearMode();\n    } //hideForm()\n    // clearIndex()\n    // clearMode()\n\n  };\n\n  console.log(values);\n  return React.createElement(Form, {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"FIRST NAME\"), touched.first_name && errors.first_name && React.createElement(\"p\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, errors.first_name), React.createElement(Field, {\n    type: \"text\",\n    name: \"first_name\",\n    placeholder: \"First Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"LAST NAME\"), touched.last_name && errors.last_name && React.createElement(\"p\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, errors.last_name), React.createElement(Field, {\n    type: \"text\",\n    name: \"last_name\",\n    placeholder: \"Last Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => throwForm(values.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"SUBMIT\"));\n};\n\nconst FormikComponent = withFormik({\n  mapPropsToValues({\n    first_name,\n    last_name,\n    id\n  }) {\n    return {\n      first_name,\n      last_name,\n      id\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    first_name: Yup.string().required('required'),\n    last_name: Yup.string().required('required')\n  }),\n\n  handleSubmit(values, {\n    resetForm,\n    setErrors,\n    setSubmitting\n  }) {\n    if (values.first_name !== '' && values.last_name !== '') {\n      hideForm();\n      clearIndex();\n      clearMode();\n      resetForm();\n    } else {\n      setErrors({\n        first_name: \"required\"\n      });\n    }\n  }\n\n})(FormField);\n\nconst mapStateToProps = store => {\n  return {\n    state: store.formDisplayReducer,\n    users: store.usersReducer.users,\n    userIndexToEdit: store.editUserReducer.userIndexToEdit,\n    writeMode: store.editUserReducer.writeMode\n  };\n};\n\nexport default connect(mapStateToProps, {\n  hideForm,\n  newUsersEdit,\n  clearIndex,\n  newUsersAdd,\n  clearMode\n})(FormikComponent);","map":{"version":3,"sources":["/Users/Ucing/Desktop/FE Test Review/FE TEST USER MANAGEMENT/user-management/src/component/FormField.js"],"names":["React","withFormik","Field","Form","connect","Yup","newUsersEdit","newUsersAdd","hideForm","clearIndex","clearMode","FormField","touched","errors","values","state","users","userIndexToEdit","writeMode","currentUsers","console","log","throwForm","id","first_name","last_name","FormikComponent","mapPropsToValues","validationSchema","object","shape","string","required","handleSubmit","resetForm","setErrors","setSubmitting","mapStateToProps","store","formDisplayReducer","usersReducer","editUserReducer"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport {withFormik, Field, Form} from 'formik';\nimport {connect} from 'react-redux';\nimport * as Yup from 'yup';\nimport { newUsersEdit, newUsersAdd} from '../actions/Users';\nimport { hideForm } from '../actions/Form';\nimport { clearIndex, clearMode } from '../actions/Edit';\n\n\nconst FormField = ({touched, errors, values, hideForm, state, newUsersEdit, users, userIndexToEdit, clearIndex, clearMode, newUsersAdd, writeMode}) => {\n    \n    let currentUsers = [...users]\n    console.log(errors)\n    const throwForm = (id,)=> {\n        //hide form and clear everything\n        if(values.first_name == '' || values.last_name == ''){\n            //hideForm()\n            return null\n        }else{\n            if(writeMode === 'edit_mode'){\n                //newUsers[userIndexToEdit] = values\n                newUsersEdit(currentUsers, id, userIndexToEdit, values, hideForm)\n            }else if(writeMode === 'add_mode'){\n                //newUsers.push(values)\n                newUsersAdd(currentUsers, values, hideForm)\n            }\n            hideForm()\n            clearIndex()\n            clearMode()\n        }\n        //hideForm()\n        // clearIndex()\n        // clearMode()\n    }\n\n    console.log(values)\n    return (\n        <Form className=\"form\">\n            <p>FIRST NAME</p>\n            {touched.first_name && errors.first_name && <p className=\"required\">{errors.first_name}</p>}\n            <Field type=\"text\" name=\"first_name\" placeholder=\"First Name\"/>\n\n            <p>LAST NAME</p>\n            {touched.last_name && errors.last_name && <p className=\"required\">{errors.last_name}</p>}\n            <Field type=\"text\" name=\"last_name\" placeholder=\"Last Name\"/>\n\n            <button onClick={()=>throwForm(values.id)}>SUBMIT</button>\n        </Form>\n    )\n}\n\nconst FormikComponent = withFormik({\n    mapPropsToValues({first_name, last_name, id}){\n        return {\n            first_name,\n            last_name, \n            id\n        }\n    }, \n    \n    validationSchema : Yup.object().shape({\n        first_name: Yup.string().required('required'),\n        last_name: Yup.string().required('required'),\n    }),\n\n    handleSubmit(values, {resetForm, setErrors, setSubmitting}){\n        if(values.first_name !== '' && values.last_name !== ''){\n            hideForm()\n            clearIndex()\n            clearMode()\n            resetForm()\n          \n            \n        }else{\n            setErrors({first_name: \"required\"})\n           \n        }\n        \n    }\n})(FormField)\n\nconst mapStateToProps = (store) => {\n    return {\n        state: store.formDisplayReducer,\n        users: store.usersReducer.users,\n        userIndexToEdit: store.editUserReducer.userIndexToEdit,\n        writeMode: store.editUserReducer.writeMode\n    }\n}\n\nexport default connect(mapStateToProps, {hideForm, newUsersEdit, clearIndex, newUsersAdd, clearMode}) (FormikComponent)"]},"metadata":{},"sourceType":"module"}